title: Deploy to Google Play
summary: Uploads and releases apps to Google Play Store
description: |-
  Uploads and releases apps to Google Play Store.

  The step supports single APK, [multiple APK](https://developer.android.com/google/play/publishing/multiple-apks.html) and Bundle deploys.

  To use this step:

  1. Upload the first apk manually (using the web interface):

    Visit the [Google Play Console](https://play.google.com/apps/publish) -> All applications -> CREATE APPLICATION

  2. Link your Google Play Developer Console to an API project:

    Described in [Google Play Developer API](https://developers.google.com/android-publisher/getting_started)'s __Linking your API Project__ section

  3. Setup API Access Clients, using a service account:

    Described in [Google Play Developer API](https://developers.google.com/android-publisher/getting_started)'s __Using a service account__ section

    __NOTE__: When you create your service account on the Google Play Developer Console, choose json as `Key Type`.

  4. Grant the necessary rights to the service account:

    Visit the [Google Play Console](https://play.google.com/apps/publish) -> Settings -> Users & permissions -> Invite new user.

    Due to the way the Google Play Publisher API works, you have to grant at least the following permissions to that service account:

      - ACCESS LEVEL: View app information
      - RELEASE MANAGEMENT: Manage production releases, Manage testing track releases
      - STORE PRESENCE: Edit store listing, pricing & distribution

  5. OPTIONAL - Add translations for your Store Listing:

    To allow the step to assign your 'whatsnew' files to the uploaded apk version.

    Visit [Play Console Help](https://support.google.com/googleplay/android-developer/answer/3125566?hl=en)'s __Add translations for your Store Listing__ section
website: https://github.com/bitrise-io/steps-google-play-deploy
source_code_url: https://github.com/bitrise-io/steps-google-play-deploy
support_url: https://github.com/bitrise-io/steps-google-play-deploy/issues
project_type_tags:
  - android
  - xamarin
  - cordova
  - ionic
  - react-native
  - flutter
type_tags:
  - deploy
is_requires_admin_user: false
is_always_run: false
is_skippable: false
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-google-play-deploy
inputs:
  - service_account_json_key_path:
    opts:
      title: Service Account JSON key file path
      description: |-
        Path to the Service Account's JSON key file.

        For remote JSON key file you can provide any download location (ex: `https://URL/TO/key.json`).
        For local JSON key file provide file path url. (ex: `file://PATH/TO/key.json`).
      is_required: true
      is_sensitive: true
  - package_name:
    opts:
      title: Package name
      description: |-
        Package name of the app.
      is_required: true
  - app_path: $BITRISE_APK_PATH\n$BITRISE_AAB_PATH
    opts:
      title: App file path
      description: |-
        Path to the App Bundle or APK file(s) to deploy.

        In case of [multiple APK](https://developer.android.com/google/play/publishing/multiple-apks.html) deploy, you can specify multiple APKs as a newline `\n` or pipe `|` separated list.
      is_required: true
  - expansionfile_path: ""
    opts:
      title: Expansion file Path
      description: |-
        Path to the expansion file.

        Leave empty or provide exactly the same number of paths as in app_path, separated by `|` character and start each path with the expansion file's type
        separated by a `:`. (main, patch)

        Format examples:

        - `main:/path/to/my/app.obb`
        - `patch:/path/to/my/app1.obb|main:/path/to/my/app2.obb|main:/path/to/my/app3.obb`
  - track: alpha
    opts:
      title: Track
      summary: The track in which you want to assign the uploaded app.
      description: |-
        The track in which you want to assign the uploaded app.

        Can be one of the built-in tracks: internal, alpha, beta, production.

        Or you can set your custom track name as well.

        For internal app sharing, set track to internal-app-sharing.

        For example: `pre-release`, or any of your closed track you added in Google Play Developer Console.
      is_required: true
  - user_fraction:
    opts:
      title: User Fraction
      description: |-
        Portion of the users who should get the staged version of the app. Accepts values between 0.0 and 1.0 (exclusive-exclusive).
        To release to all users, this input should not be defined (or should be blank).
      is_required: false
  - whatsnews_dir:
    opts:
      title: "Directory of localized what's new files"
      description: |-
        Use this input to specify localized 'what's new' files directory.

        This directory should contain 'whatsnew' files postfixed with the locale.

        what's new file name pattern: `whatsnew-LOCALE`

        Example:

        ```
        + - [PATH/TO/WHATSNEW]
            |
            + - whatsnew-en-US
            |
            + - whatsnew-de-DE
        ```

        Format examples:

        - "./"         # what's new files are in the repo root directory
        - "./whatsnew" # what's new files are in the whatsnew directory
  - mapping_file: "$BITRISE_MAPPING_PATH"
    opts:
      title: Location of your mapping.txt file
      description: |-
        The `mapping.txt` file provides a translation between the original and obfuscated class, method, and field names.
  - verbose_logging: "false"
    opts:
      title: "Enable verbose logging"
      value_options:
      - "true"
      - "false"
      is_required: true
outputs:
  - BITRISE_APK_URL:
    opts:
      title: "URL of the uploaded Internal App Sharing APK"
      summary: "Play Store Internal App Sharing URL of the uploaded APK."
      description: |-
        Only non-empty if the track is set to internal-app-sharing.
